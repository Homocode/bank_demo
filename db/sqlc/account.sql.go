// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: account.sql

package db

import (
	"context"
)

const addAmountToAccountBalance = `-- name: AddAmountToAccountBalance :one
UPDATE accounts
SET balance = balance + $1 -- equal to: balance + $1
WHERE id = $2 -- equal to: $2
RETURNING id, owner, balance, currency, created_at
`

type AddAmountToAccountBalanceParams struct {
	Amount int64 `db:"amount" json:"amount"`
	ID     int64 `db:"id" json:"id"`
}

func (q *Queries) AddAmountToAccountBalance(ctx context.Context, arg AddAmountToAccountBalanceParams) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, addAmountToAccountBalance, arg.Amount, arg.ID)
	var i Accounts
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    owner,
    balance,
    currency
) VALUES (
    $1, $2, $3
) 
RETURNING id, owner, balance, currency, created_at
`

type CreateAccountParams struct {
	Owner    string `db:"owner" json:"owner"`
	Balance  int64  `db:"balance" json:"balance"`
	Currency string `db:"currency" json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
	var i Accounts
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, balance, currency, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Accounts
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountToUpdate = `-- name: GetAccountToUpdate :one
SELECT id, owner, balance, currency, created_at FROM accounts
WHERE id = $1 
LIMIT 1
FOR NO KEY UPDATE
`

// FOR UPDATE is used in a Tx (let's call it Tx1) to lock the table for other Tx's, thus, no other queries
// coming from another Tx (let's call it Tx2) can be executed on the table, so if Tx2 attemps to operate
// on the lock table, Tx2 gets block until Tx1 (that performs the lock) is finished (COMMITED or ROLLBACK).
// Only then Tx2 is able to operate on accounts table and the Tx is "unblock".
//
// NO KEY tell postgres that the primary key isnt going to be update.
// If NO KEY isnt use a "DEADLOCK" will occur because other tables use the accounts table
// primary key (id) as their foregein keys.
// When the table accounts get lock (because of the use of FOR UPDATE) from Tx1, Tx2 canÂ´t operate
// (read/write) from the accounts table row that is lock, so when Tx2 need to access the account row to
// get the account id to use it as a foregin key for a new record on another table (transfers or entries)
// it can't access it due to the lock that is being held on accounts table row from Tx1. So Tx2 also get
// block and that is why the deadlock occurs (a deadlock is a situation in which two or more transactions
// are waiting for one another to give up locks.)
func (q *Queries) GetAccountToUpdate(ctx context.Context, id int64) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, getAccountToUpdate, id)
	var i Accounts
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, owner, balance, currency, created_at FROM accounts
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAccountsParams struct {
	Owner  string `db:"owner" json:"owner"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Accounts, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Accounts
	for rows.Next() {
		var i Accounts
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET balance = $2
WHERE id = $1
RETURNING id, owner, balance, currency, created_at
`

type UpdateAccountParams struct {
	ID      int64 `db:"id" json:"id"`
	Balance int64 `db:"balance" json:"balance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Balance)
	var i Accounts
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
