// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users ( 
    email,
    hashed_password,
    full_name
) VALUES (
    $1, $2, $3
)
RETURNING email, hashed_password, full_name, password_changed_at, created_at
`

type CreateUserParams struct {
	Email          string `db:"email" json:"email"`
	HashedPassword string `db:"hashed_password" json:"hashed_password"`
	FullName       string `db:"full_name" json:"full_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword, arg.FullName)
	var i Users
	err := row.Scan(
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT email, hashed_password, full_name, password_changed_at, created_at FROM users
WHERE email = $1 
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i Users
	err := row.Scan(
		&i.Email,
		&i.HashedPassword,
		&i.FullName,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
